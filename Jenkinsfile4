pipeline{

agent any

parameters {
  string (name: 'paramMdas_POM', defaultValue: 'QA', description: 'This is the value passing from paraMdas defined in Jenkins Declarative PipleLine from SCM GIT ')
  choice (name: 'branchOfProject', choices: ['master', 'smoke'], description: 'This is the branch name required for Amazon test to run')

}
environment {
        RECIPIENTS = 'infinityloves49@gmail.com'
    }
stages {

stage('git checkouts') {
  steps {
            git branch:"${params.branchOfProject}", url:'https://github.com/mdashub/MFS_Jenkins.git'
            echo "${params.branchOfProject}"
  }
}

stage ('run test'){
      steps{
            bat "mvn clean install -DparaMdas=${params.paramMdas_POM}"
            testNG()
            archiveArtifacts artifacts: '**/*.jar',
                   allowEmptyArchive: true,
                   fingerprint: true,
                   onlyIfSuccessful: true
        }
      }

  }

post {
        always {
            echo 'Cleaning up...'
            cleanWs() 
          
        }

          unstable {
            echo 'Pipeline succeeded!'
             emailext(
                to: "${RECIPIENTS}",
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "The job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' has UNSTABLE. Check details at: ${env.BUILD_URL}"
            )
        }
        success {
            echo 'Pipeline succeeded!'
             emailext(
                to: "${RECIPIENTS}",
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "The job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' has SUCCEEDED. Check details at: ${env.BUILD_URL}"
            )
        }
        failure {
            echo 'Pipeline failed!'
             emailext(
                to: "${RECIPIENTS}",
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "The job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' has FAILED. Check details at: ${env.BUILD_URL}"
            )
        }
    }


}
